/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev */

#ifndef PB_SETDACVOLTAGE_PB_H_INCLUDED
#define PB_SETDACVOLTAGE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _SetDacVoltage {
    uint32_t dac_id;
    uint32_t dac_channel;
    float voltage;
/* @@protoc_insertion_point(struct:SetDacVoltage) */
} SetDacVoltage;


/* Initializer values for message structs */
#define SetDacVoltage_init_default               {0u, 0u, 0}
#define SetDacVoltage_init_zero                  {0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define SetDacVoltage_dac_id_tag                 1
#define SetDacVoltage_dac_channel_tag            2
#define SetDacVoltage_voltage_tag                3

/* Struct field encoding specification for nanopb */
#define SetDacVoltage_FIELDLIST(X, a) \
X(a, STATIC, REQUIRED, FIXED32, dac_id, 1) \
X(a, STATIC, REQUIRED, FIXED32, dac_channel, 2) \
X(a, STATIC, REQUIRED, FLOAT, voltage, 3)
#define SetDacVoltage_CALLBACK NULL
#define SetDacVoltage_DEFAULT (const uint8_t*)"\x0d\x00\x00\x00\x00\x15\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00"

extern const pb_msgdesc_t SetDacVoltage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SetDacVoltage_fields &SetDacVoltage_msg

/* Maximum encoded size of messages (where known) */
#define SetDacVoltage_size                       15

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
